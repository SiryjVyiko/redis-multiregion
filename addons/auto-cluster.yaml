type: update
jpsVersion: 1.8.1
name: Redis multi region cluster logic
decription: Redis multi region cluster autoscaling logic
baseUrl: https://raw.githubusercontent.com/DmytroZubelevych/redis-multiregion/master

onInstall:
  - clusterInit
  
onAfterAttachExtIp[nosqldb]:
  - setClusterAnnounceIp: ${nodes.nosqldb.join(id,)}
  
onBeforeDetachExtIp[nosqldb]:
  - setClusterAnnounceIp: ${nodes.nosqldb.join(id,)}
 
onAfterSetExtIpCount[nosqldb]:
  - setClusterAnnounceIp: ${nodes.nosqldb.join(id,)}
  
onAfterResetNodePassword[nosqldb]:
  - getRedisPasswd
  - setMasterAuth: ${nodes.nosqldb.join(id,)}
  
onAfterResetServicePassword[nosqldb]:
  - getRedisPasswd
  - setMasterAuth: ${nodes.nosqldb.join(id,)}

actions:
  clusterInit:
    - cmd[${nodes.nosqldb.master.id}]: |-
        export REDISCLI_AUTH=$(cat /etc/redis.conf |grep '^requirepass'|awk '{print $2}');
        yes yes| redis-cli --cluster create $(echo ${nodes.nosqldb.join(address,)} | sed 's/,/:6379 /g'):6379 --cluster-replicas 0
      user: root
      sayYes: no
    - rebalanceCluster
    - cmd[nosqldb]: jem service start;
    - forEach(nodes.nosqldb):
        - script: ${baseUrl}/scripts/addReplicas.js

  getRedisPasswd:
    - cmd[${nodes.nosqldb.master.id}]: cat /etc/redis.conf |grep ^requirepass|awk '{print $2}'
      
  reshardAfterScaleOut:
    - cmd[${this.id}]:
        export REDISCLI_AUTH=$(cat /etc/redis.conf |grep '^requirepass'|awk '{print $2}');
        export NEW_NODE_ID=$(redis-cli cluster nodes|grep ${this.address}|grep master|awk '{print $1}');
        export n=$(redis-cli cluster nodes|grep master|wc -l);
        export SHARDS_NUM=$(( 16384 / ${n} ));
        if [ ! -z "${NEW_NODE_ID}" ]; then redis-cli --cluster reshard ${this.address}:6379 --cluster-from all --cluster-to ${NEW_NODE_ID} --cluster-slots ${SHARDS_NUM} --cluster-yes; else true; fi;
        redis-cli --cluster check ${this.address}:6379 || redis-cli --cluster fix ${this.address}:6379;
      user: root
      sayYes: no
      
  addNewNodeToCluster:
    - prepareClusterNode: ${event.response.nodes.join(id,)}
    - forEach(event.response.nodes):
        - cmd[${nodes.nosqldb.master.id}]: |-
            export REDISCLI_AUTH=$(cat /etc/redis.conf |grep '^requirepass'|awk '{print $2}');
            export n=$(redis-cli cluster nodes|wc -l);
            redis-cli -h ${nodes.nosqldb.master.address} cluster meet ${@i.address} 6379;
            if [ $(expr $n % 2) != 0 ]; then
                MASTERS_LIST=$(redis-cli cluster nodes|grep master|grep -v ${@i.address}:6379|awk '{print $2}'|awk -F ':' '{print $1}'|tr '\n' ' ')
                for i in ${MASTERS_LIST}
                do
                   SLAVES_STRING=$(redis-cli -h $i INFO|grep ^slave[0-9])        
                   if [[ -z "${SLAVES_STRING}" ]]; then
                        TARGET_MASTER_ID=$(redis-cli cluster nodes|grep $i:6379|awk '{print $1}')
                        break
                    fi
                done
                retries=12
                while [ $retries -gt 0 ]; do
                    sleep 20
                    NODES_LIST=$(redis-cli -h ${@i.address} cluster nodes|grep -v ERR)
                    [ -n "${NODES_LIST}" ] && break
                    let retries=${retries}-1
                done
                redis-cli -h ${@i.address} cluster replicate ${TARGET_MASTER_ID}
            fi;
          user: root
    - forEach(event.response.nodes):
        - reshardAfterScaleOut: 
            id: ${@i.id}
            address: ${@i.address}
    - rebalanceCluster
    
  rebalanceCluster:
    - cmd[${nodes.nosqldb.master.id}]:
        export REDISCLI_AUTH=$(cat /etc/redis.conf |grep '^requirepass'|awk '{print $2}');
        redis-cli --cluster check ${nodes.nosqldb.master.address}:6379 || redis-cli --cluster fix ${nodes.nosqldb.master.address}:6379;
        redis-cli --cluster rebalance ${nodes.nosqldb.master.address}:6379;
      user: root
      
  setClusterAnnounceIp:
    - cmd[${this}]:
        jem service stop;
        sed -i '/^cluster-announce-ip/d' /etc/redis.conf;
        echo "cluster-announce-ip $(ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1)" >> /etc/redis.conf;
        jem service start;
      user: root
      sayYes: no
      
  setMasterAuth:
    - getRedisPasswd
    - cmd[${this}]:
        sed -i '/^masterauth/d' /etc/redis.conf;
        echo "masterauth ${response.out}" >> /etc/redis.conf;
        jem service restart;
      user: root
